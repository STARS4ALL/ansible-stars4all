# {{ ansible_managed }}
# ----------------------------------------------------------------------
# Copyright (c) 2014 Rafael Gonzalez.
#
# See the LICENSE file for details
# ----------------------------------------------------------------------

#------------------------------------------------------------------------#
[stats]

# Statistics section
# interval in seconds where to display statistics
interval = {{ new_tdb_config.stats.interval | default(3600) }}

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "{{ new_tdb_config.stats.log_level | default('info') }}"

#------------------------------------------------------------------------#
[http]

# HTTP management interface section

# Connection is made by env variables ADMIN_HTTP_LISTEN_ADDR, ADMIN_HTTP_PORT

# http task log level (debug, info, warn, error, critical)
log_level = "{{ new_tdb_config.http.log_level | default('info') }}"

#------------------------------------------------------------------------#
[mqtt]

# MQTT Client config

# The broker host, username, password and client_id
# are configured by environment variables
# MQTT_BROKER, MQTT_USERNAME, MQTT_PASSWORD, MQTT_CLIENT_ID
# respectively

# Keepalive connection (in seconds)
# Not reloadable property
keepalive = {{ new_tdb_config.mqtt.keepalive | default(60) }}

# MQTT Topic to subscribe for automatic registration
# Leave as empty string to disable automatic registration
# Reloadable property
tess_topic_register = "{{ new_tdb_config.mqtt.tess_topic_register | default('STARS4ALL/register') }}"

# List of MQTT topics to subscribe for readings
# Reloadable property
tess_topics = {{ new_tdb_config.mqtt.tess_topics | default(['STARS4ALL/+/reading']) }}

# Instrument White List.
# Discards instruments readings and registrations 
# whose name do not belong to this list
# Useful to keep your own readings database when sharing
# MQTT topic with other TESS instruments
# Leave empty if not used.
# Reloadable property
tess_whitelist = {{ new_tdb_config.mqtt.tess_whitelist | default([]) }}

# Instrument Black List.
# Discards instruments readings and registrations 
# whose name belong to this list
# Useful to discard a particular "noisy" instruments
# with lots of readings
# Leave empty if not used.
# Reloadable property
tess_blacklist = {{ new_tdb_config.mqtt.tess_blacklist | default([]) }}

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "{{ new_tdb_config.mqtt.log_level | default('info') }}"

# MQTT PDUs log level. 
# See all PDU exchanges with 'debug' level. Otherwise, leave it to 'info'
# Reloadable property
protocol_log_level = "{{ new_tdb_config.mqtt.protocol_log_level | default('info') }}"

#------------------------------------------------------------------------#

[filter]
# Invalid samples filter
# This module filters out invalid incoming data by analyzing a window
# of samples before and after a given one.

# Filter depth (window size)
# Should be an odd, number, minimun 3, recommended 7.
# depth = 3 -> keep 1 invalid sample  after the valid ones
# depth = 5 -> keep 2 invalid samples after the valid ones
# depth = 7 -> keep 3 invalid samples after the valid ones
# Not reloadable property
depth = {{ new_tdb_config.filter.depth | default(7) }}

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "{{ new_tdb_config.filter.log_level | default('info') }}"

# number of photometers whose filters remain to be flushed
# The flushing process will stop when this threahold is reached
# An estimate of (depth/2)*flush_threshold readings will be lost
# if set too low, the remaining filters will be offering to the database
# unfiltered data, possibly with saturated readings, so there is a
# trade-off to be made. 6 seems a good compromise 
# for the STARS4ALL photometer network.
# reloadable property 
flush_threshold = 6

# Disable daylight filtering for an specific photometers list
# reloadable property
disabled_for = {{ new_tdb_config.filter.disabled_for | default([]) }}

# Individual filter loggers
# reloadable property
[filter.loggers]
{% for k in new_tdb_config.filter.loggers -%}
{% for name, level in k.items() -%} {# Only one item in the dictionary ...#}
{{ name }} = {{ level }}
{% endfor -%}
{% endfor %}

# Enable/disable daylight filtering, which reduce database size
# by not storing daylight, saturated readings.
# reloadable property
[filter.enable]
daylight = {{ new_tdb_config.filter.enabled | default(False) | ternary('true','false') }}

# Divisor N to decimate every N times the following data coming from photometers
# reloadable property
[filter.divisor]
{% for k in new_tdb_config.filter.divisor -%}
{% for name, N in k.items() -%} {# Only one item in the dictionary ...#}
{{ name }} = {{ N }}
{% endfor -%}
{% endfor %}

#------------------------------------------------------------------------#

# Database configuration section
[dbase]
# The database connection string is configured
# in the DATABASE_URL environment variable

# Authorisation filter
# Each TESS-W photometer must be authorised to write to the database
# The recommended use is to manually authorise it after the TESS photomenter
# is in place and measuring properly
# However, this can be disabled.
auth_filter = {{ new_tdb_config.dbase.auth_filter | default(True) | ternary('true','false') }}

# Write Buffer size
# Writes to database every N readings to improve I/O performance
# Integer > 1
# Reloadable property
buffer_size = {{ new_tdb_config.dbase.buffer_size | default(50) }}

# ZP Low Limit
# Due to a firmware bug, some ZP sends absurd low ZP values such as 2 or 0
# This filters out all register messages with a ZP value below a thresold
# Reloadable property
zp_threshold = {{ new_tdb_config.dbase.zp_threshold | default(10) }}

# general dbase namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "{{ new_tdb_config.dbase.log_level | default('info') }}"

# max queue size for write TESS readings
# non reloadable property
queue_size = {{ new_tdb_config.dbase.queue_size | default(864000) }}
